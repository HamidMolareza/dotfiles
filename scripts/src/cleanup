#!/usr/bin/env bash
# Ubuntu Cleanup Script (prompt-per-step + non-interactive mode)
# Works on desktop/server. Uses safe defaults and asks before each action.
# Non-interactive mode (-y/--yes) auto-answers "yes" to all prompts.

set -u  # don't use -e so one failure doesn't stop everything

# -----------------------
# Defaults / CLI parsing
# -----------------------
KEEP_KERNELS=2           # requires purge-old-kernels (from byobu)
KEEP_JOURNAL_DAYS=14
ASSUME_YES=false

usage() {
  cat <<EOF
Usage: sudo ./ubuntu-cleanup.sh [options]

Options:
  --keep-kernels N       Keep N newest kernels when purging old kernels (default: $KEEP_KERNELS).
  --journal-days N       Vacuum systemd journal to the last N days (default: $KEEP_JOURNAL_DAYS).
  -y, --yes              Non-interactive mode (auto-approve all steps).
  -h, --help             Show this help.

The script will attempt all cleanup categories, pausing to ask before each one
unless -y/--yes is provided.
EOF
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --keep-kernels) KEEP_KERNELS="${2:-}"; shift 2 ;;
    --journal-days) KEEP_JOURNAL_DAYS="${2:-}"; shift 2 ;;
    -y|--yes) ASSUME_YES=true; shift ;;
    -h|--help) usage; exit 0 ;;
    *) echo "Unknown option: $1"; usage; exit 1 ;;
  esac
done

# -------------
# Helpers
# -------------
is_root() { [[ "${EUID:-$(id -u)}" -eq 0 ]]; }
run_root() { if is_root; then "$@"; else sudo "$@"; fi }
confirm() {
  $ASSUME_YES && return 0
  read -r -p "$1 [y/N] " ans
  [[ "$ans" =~ ^[Yy]$ ]]
}

TARGET_USER="${SUDO_USER:-$USER}"
TARGET_HOME="$(getent passwd "$TARGET_USER" | cut -d: -f6)"
[[ -z "${TARGET_HOME:-}" ]] && { echo "Could not determine home for $TARGET_USER"; exit 1; }

echo "Running as: $(whoami)"
echo "Target user: $TARGET_USER"
echo "Target home: $TARGET_HOME"
echo

# Disk free before
df_before="$(df -h / | awk 'NR==2 {print $4}')"

# -------------
# User-level cleanup
# -------------
if confirm "Empty trash for $TARGET_USER? (${TARGET_HOME}/.local/share/Trash)"; then
  rm -rf --one-file-system -- "${TARGET_HOME}/.local/share/Trash/files/"* "${TARGET_HOME}/.local/share/Trash/info/"* 2>/dev/null || true
fi

if confirm "Clear thumbnail cache (~/.cache/thumbnails)?"; then
  rm -rf --one-file-system -- "${TARGET_HOME}/.cache/thumbnails/"* 2>/dev/null || true
fi

if confirm "Clear generic user cache (~/.cache) EXCEPT hidden config dirs?"; then
  # remove direct children of ~/.cache
  find "${TARGET_HOME}/.cache" -mindepth 1 -maxdepth 1 -exec rm -rf -- {} + 2>/dev/null || true
fi

if confirm "Remove common dev caches (pip/npm/yarn) if present?"; then
  rm -rf -- "${TARGET_HOME}/.cache/pip" 2>/dev/null || true
  rm -rf -- "${TARGET_HOME}/.npm/_cacache" 2>/dev/null || true
  rm -rf -- "${TARGET_HOME}/.cache/yarn" 2>/dev/null || true
fi

# Ensure user owns what's left in their cache (in case we ran with sudo)
chown -R "$TARGET_USER":"$TARGET_USER" "${TARGET_HOME}/.cache" 2>/dev/null || true

# -------------
# APT cleanup
# -------------
if confirm "APT: autoremove/autoclean/clean? (remove unused packages & caches)"; then
  run_root apt-get -y autoremove --purge || true
  run_root apt-get -y autoclean || true
  run_root apt-get -y clean || true
fi

# Old kernels: safe via purge-old-kernels if available
if command -v purge-old-kernels >/dev/null 2>&1; then
  if confirm "Purge old kernels (keep newest ${KEEP_KERNELS}) using purge-old-kernels?"; then
    run_root purge-old-kernels --keep "$KEEP_KERNELS" -qy || true
  fi
else
  echo "Note: 'purge-old-kernels' not found; install 'byobu' to enable safe kernel cleanup."
fi

# -------------
# Snap & Flatpak
# -------------
if command -v snap >/dev/null 2>&1; then
  if confirm "Snap: remove old *disabled* revisions? (safe)"; then
    # shellcheck disable=SC2016
    run_root bash -c "snap list --all | awk '/disabled/{print \$1, \$3}' | while read n r; do snap remove \"\$n\" --revision=\"\$r\" || true; done"
  fi
fi

if command -v flatpak >/dev/null 2>&1; then
  if confirm "Flatpak: uninstall unused runtimes (flatpak uninstall --unused)?"; then
    run_root flatpak uninstall --unused -y || true
  fi
fi

# -------------
# Journals & logs
# -------------
if command -v journalctl >/dev/null 2>&1; then
  if confirm "Journald: vacuum logs to last ${KEEP_JOURNAL_DAYS} days?"; then
    run_root journalctl --vacuum-time="${KEEP_JOURNAL_DAYS}d" || true
  fi
fi

# Optional: trim oversize plain log files in /var/log (keeps rotated archives)
if confirm "Trim very large *.log files in /var/log (>100MB) by truncating them?"; then
  run_root find /var/log -type f -name "*.log" -size +100M -exec sh -c 'for f; do : > "$f"; done' _ {} + 2>/dev/null || true
fi

# -------------
# Docker (aggressive, but safe if you know you don't need old data)
# -------------
if command -v docker >/dev/null 2>&1; then
  if confirm "Docker: prune unused images/containers/networks/volumes (docker system prune -a --volumes)?"; then
    run_root docker system prune -a --volumes -f || true
  fi
fi

# -------------
# Finishing up
# -------------
echo
df_after="$(df -h / | awk 'NR==2 {print $4}')"
echo "Free space on /  -> before: ${df_before}, after: ${df_after}"
echo "Done âœ…"
